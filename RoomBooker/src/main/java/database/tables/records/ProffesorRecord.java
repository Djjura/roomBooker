/*
 * This file is generated by jOOQ.
 */
package database.tables.records;


import database.tables.Proffesor;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProffesorRecord extends UpdatableRecordImpl<ProffesorRecord> implements Record3<String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>diplomski.proffesor.id</code>.
     */
    public ProffesorRecord setId(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>diplomski.proffesor.id</code>.
     */
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>diplomski.proffesor.name</code>.
     */
    public ProffesorRecord setName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>diplomski.proffesor.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>diplomski.proffesor.lastname</code>.
     */
    public ProffesorRecord setLastname(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>diplomski.proffesor.lastname</code>.
     */
    public String getLastname() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<String, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Proffesor.PROFFESOR.ID;
    }

    @Override
    public Field<String> field2() {
        return Proffesor.PROFFESOR.NAME;
    }

    @Override
    public Field<String> field3() {
        return Proffesor.PROFFESOR.LASTNAME;
    }

    @Override
    public String component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getLastname();
    }

    @Override
    public String value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getLastname();
    }

    @Override
    public ProffesorRecord value1(String value) {
        setId(value);
        return this;
    }

    @Override
    public ProffesorRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public ProffesorRecord value3(String value) {
        setLastname(value);
        return this;
    }

    @Override
    public ProffesorRecord values(String value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ProffesorRecord
     */
    public ProffesorRecord() {
        super(Proffesor.PROFFESOR);
    }

    /**
     * Create a detached, initialised ProffesorRecord
     */
    public ProffesorRecord(String id, String name, String lastname) {
        super(Proffesor.PROFFESOR);

        setId(id);
        setName(name);
        setLastname(lastname);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised ProffesorRecord
     */
    public ProffesorRecord(database.tables.pojos.Proffesor value) {
        super(Proffesor.PROFFESOR);

        if (value != null) {
            setId(value.getId());
            setName(value.getName());
            setLastname(value.getLastname());
            resetChangedOnNotNull();
        }
    }
}
