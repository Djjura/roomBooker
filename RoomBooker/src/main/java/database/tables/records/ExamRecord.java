/*
 * This file is generated by jOOQ.
 */
package database.tables.records;


import database.tables.Exam;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ExamRecord extends UpdatableRecordImpl<ExamRecord> implements Record4<String, String, Integer, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>diplomski.exam.id</code>.
     */
    public ExamRecord setId(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>diplomski.exam.id</code>.
     */
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>diplomski.exam.name</code>.
     */
    public ExamRecord setName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>diplomski.exam.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>diplomski.exam.semester</code>.
     */
    public ExamRecord setSemester(Integer value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>diplomski.exam.semester</code>.
     */
    public Integer getSemester() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>diplomski.exam.espb</code>.
     */
    public ExamRecord setEspb(Integer value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>diplomski.exam.espb</code>.
     */
    public Integer getEspb() {
        return (Integer) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<String, String, Integer, Integer> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Exam.EXAM.ID;
    }

    @Override
    public Field<String> field2() {
        return Exam.EXAM.NAME;
    }

    @Override
    public Field<Integer> field3() {
        return Exam.EXAM.SEMESTER;
    }

    @Override
    public Field<Integer> field4() {
        return Exam.EXAM.ESPB;
    }

    @Override
    public String component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public Integer component3() {
        return getSemester();
    }

    @Override
    public Integer component4() {
        return getEspb();
    }

    @Override
    public String value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public Integer value3() {
        return getSemester();
    }

    @Override
    public Integer value4() {
        return getEspb();
    }

    @Override
    public ExamRecord value1(String value) {
        setId(value);
        return this;
    }

    @Override
    public ExamRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public ExamRecord value3(Integer value) {
        setSemester(value);
        return this;
    }

    @Override
    public ExamRecord value4(Integer value) {
        setEspb(value);
        return this;
    }

    @Override
    public ExamRecord values(String value1, String value2, Integer value3, Integer value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ExamRecord
     */
    public ExamRecord() {
        super(Exam.EXAM);
    }

    /**
     * Create a detached, initialised ExamRecord
     */
    public ExamRecord(String id, String name, Integer semester, Integer espb) {
        super(Exam.EXAM);

        setId(id);
        setName(name);
        setSemester(semester);
        setEspb(espb);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised ExamRecord
     */
    public ExamRecord(database.tables.pojos.Exam value) {
        super(Exam.EXAM);

        if (value != null) {
            setId(value.getId());
            setName(value.getName());
            setSemester(value.getSemester());
            setEspb(value.getEspb());
            resetChangedOnNotNull();
        }
    }
}
