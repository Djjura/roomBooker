/*
 * This file is generated by jOOQ.
 */
package database.tables.records;


import database.tables.Room;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RoomRecord extends UpdatableRecordImpl<RoomRecord> implements Record5<String, String, String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>diplomski.room.uuid</code>.
     */
    public RoomRecord setUuid(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>diplomski.room.uuid</code>.
     */
    public String getUuid() {
        return (String) get(0);
    }

    /**
     * Setter for <code>diplomski.room.NAME</code>.
     */
    public RoomRecord setName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>diplomski.room.NAME</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>diplomski.room.Type</code>.
     */
    public RoomRecord setType(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>diplomski.room.Type</code>.
     */
    public String getType() {
        return (String) get(2);
    }

    /**
     * Setter for <code>diplomski.room.Maximum_occupancy</code>.
     */
    public RoomRecord setMaximumOccupancy(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>diplomski.room.Maximum_occupancy</code>.
     */
    public String getMaximumOccupancy() {
        return (String) get(3);
    }

    /**
     * Setter for <code>diplomski.room.Equipment</code>.
     */
    public RoomRecord setEquipment(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>diplomski.room.Equipment</code>.
     */
    public String getEquipment() {
        return (String) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<String, String, String, String, String> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Room.ROOM.UUID;
    }

    @Override
    public Field<String> field2() {
        return Room.ROOM.NAME;
    }

    @Override
    public Field<String> field3() {
        return Room.ROOM.TYPE;
    }

    @Override
    public Field<String> field4() {
        return Room.ROOM.MAXIMUM_OCCUPANCY;
    }

    @Override
    public Field<String> field5() {
        return Room.ROOM.EQUIPMENT;
    }

    @Override
    public String component1() {
        return getUuid();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getType();
    }

    @Override
    public String component4() {
        return getMaximumOccupancy();
    }

    @Override
    public String component5() {
        return getEquipment();
    }

    @Override
    public String value1() {
        return getUuid();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getType();
    }

    @Override
    public String value4() {
        return getMaximumOccupancy();
    }

    @Override
    public String value5() {
        return getEquipment();
    }

    @Override
    public RoomRecord value1(String value) {
        setUuid(value);
        return this;
    }

    @Override
    public RoomRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public RoomRecord value3(String value) {
        setType(value);
        return this;
    }

    @Override
    public RoomRecord value4(String value) {
        setMaximumOccupancy(value);
        return this;
    }

    @Override
    public RoomRecord value5(String value) {
        setEquipment(value);
        return this;
    }

    @Override
    public RoomRecord values(String value1, String value2, String value3, String value4, String value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached RoomRecord
     */
    public RoomRecord() {
        super(Room.ROOM);
    }

    /**
     * Create a detached, initialised RoomRecord
     */
    public RoomRecord(String uuid, String name, String type, String maximumOccupancy, String equipment) {
        super(Room.ROOM);

        setUuid(uuid);
        setName(name);
        setType(type);
        setMaximumOccupancy(maximumOccupancy);
        setEquipment(equipment);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised RoomRecord
     */
    public RoomRecord(database.tables.pojos.Room value) {
        super(Room.ROOM);

        if (value != null) {
            setUuid(value.getUuid());
            setName(value.getName());
            setType(value.getType());
            setMaximumOccupancy(value.getMaximumOccupancy());
            setEquipment(value.getEquipment());
            resetChangedOnNotNull();
        }
    }
}
