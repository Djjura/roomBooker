/*
 * This file is generated by jOOQ.
 */
package database.tables.records;


import database.tables.Term;

import java.time.LocalDate;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TermRecord extends UpdatableRecordImpl<TermRecord> implements Record4<String, String, LocalDate, LocalDate> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>diplomski.term.uuid</code>.
     */
    public TermRecord setUuid(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>diplomski.term.uuid</code>.
     */
    public String getUuid() {
        return (String) get(0);
    }

    /**
     * Setter for <code>diplomski.term.name</code>.
     */
    public TermRecord setName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>diplomski.term.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>diplomski.term.start_date</code>.
     */
    public TermRecord setStartDate(LocalDate value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>diplomski.term.start_date</code>.
     */
    public LocalDate getStartDate() {
        return (LocalDate) get(2);
    }

    /**
     * Setter for <code>diplomski.term.end_date</code>.
     */
    public TermRecord setEndDate(LocalDate value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>diplomski.term.end_date</code>.
     */
    public LocalDate getEndDate() {
        return (LocalDate) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, LocalDate, LocalDate> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<String, String, LocalDate, LocalDate> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Term.TERM.UUID;
    }

    @Override
    public Field<String> field2() {
        return Term.TERM.NAME;
    }

    @Override
    public Field<LocalDate> field3() {
        return Term.TERM.START_DATE;
    }

    @Override
    public Field<LocalDate> field4() {
        return Term.TERM.END_DATE;
    }

    @Override
    public String component1() {
        return getUuid();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public LocalDate component3() {
        return getStartDate();
    }

    @Override
    public LocalDate component4() {
        return getEndDate();
    }

    @Override
    public String value1() {
        return getUuid();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public LocalDate value3() {
        return getStartDate();
    }

    @Override
    public LocalDate value4() {
        return getEndDate();
    }

    @Override
    public TermRecord value1(String value) {
        setUuid(value);
        return this;
    }

    @Override
    public TermRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public TermRecord value3(LocalDate value) {
        setStartDate(value);
        return this;
    }

    @Override
    public TermRecord value4(LocalDate value) {
        setEndDate(value);
        return this;
    }

    @Override
    public TermRecord values(String value1, String value2, LocalDate value3, LocalDate value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TermRecord
     */
    public TermRecord() {
        super(Term.TERM);
    }

    /**
     * Create a detached, initialised TermRecord
     */
    public TermRecord(String uuid, String name, LocalDate startDate, LocalDate endDate) {
        super(Term.TERM);

        setUuid(uuid);
        setName(name);
        setStartDate(startDate);
        setEndDate(endDate);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised TermRecord
     */
    public TermRecord(database.tables.pojos.Term value) {
        super(Term.TERM);

        if (value != null) {
            setUuid(value.getUuid());
            setName(value.getName());
            setStartDate(value.getStartDate());
            setEndDate(value.getEndDate());
            resetChangedOnNotNull();
        }
    }
}
