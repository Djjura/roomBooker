/*
 * This file is generated by jOOQ.
 */
package database.tables.records;


import database.tables.ExamTerm;

import java.time.LocalDate;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ExamTermRecord extends UpdatableRecordImpl<ExamTermRecord> implements Record5<String, String, String, Integer, LocalDate> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>diplomski.exam_term.uuid</code>.
     */
    public ExamTermRecord setUuid(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>diplomski.exam_term.uuid</code>.
     */
    public String getUuid() {
        return (String) get(0);
    }

    /**
     * Setter for <code>diplomski.exam_term.exam_id</code>.
     */
    public ExamTermRecord setExamId(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>diplomski.exam_term.exam_id</code>.
     */
    public String getExamId() {
        return (String) get(1);
    }

    /**
     * Setter for <code>diplomski.exam_term.term_id</code>.
     */
    public ExamTermRecord setTermId(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>diplomski.exam_term.term_id</code>.
     */
    public String getTermId() {
        return (String) get(2);
    }

    /**
     * Setter for <code>diplomski.exam_term.students_applied</code>.
     */
    public ExamTermRecord setStudentsApplied(Integer value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>diplomski.exam_term.students_applied</code>.
     */
    public Integer getStudentsApplied() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>diplomski.exam_term.date</code>.
     */
    public ExamTermRecord setDate(LocalDate value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>diplomski.exam_term.date</code>.
     */
    public LocalDate getDate() {
        return (LocalDate) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, Integer, LocalDate> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<String, String, String, Integer, LocalDate> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return ExamTerm.EXAM_TERM.UUID;
    }

    @Override
    public Field<String> field2() {
        return ExamTerm.EXAM_TERM.EXAM_ID;
    }

    @Override
    public Field<String> field3() {
        return ExamTerm.EXAM_TERM.TERM_ID;
    }

    @Override
    public Field<Integer> field4() {
        return ExamTerm.EXAM_TERM.STUDENTS_APPLIED;
    }

    @Override
    public Field<LocalDate> field5() {
        return ExamTerm.EXAM_TERM.DATE;
    }

    @Override
    public String component1() {
        return getUuid();
    }

    @Override
    public String component2() {
        return getExamId();
    }

    @Override
    public String component3() {
        return getTermId();
    }

    @Override
    public Integer component4() {
        return getStudentsApplied();
    }

    @Override
    public LocalDate component5() {
        return getDate();
    }

    @Override
    public String value1() {
        return getUuid();
    }

    @Override
    public String value2() {
        return getExamId();
    }

    @Override
    public String value3() {
        return getTermId();
    }

    @Override
    public Integer value4() {
        return getStudentsApplied();
    }

    @Override
    public LocalDate value5() {
        return getDate();
    }

    @Override
    public ExamTermRecord value1(String value) {
        setUuid(value);
        return this;
    }

    @Override
    public ExamTermRecord value2(String value) {
        setExamId(value);
        return this;
    }

    @Override
    public ExamTermRecord value3(String value) {
        setTermId(value);
        return this;
    }

    @Override
    public ExamTermRecord value4(Integer value) {
        setStudentsApplied(value);
        return this;
    }

    @Override
    public ExamTermRecord value5(LocalDate value) {
        setDate(value);
        return this;
    }

    @Override
    public ExamTermRecord values(String value1, String value2, String value3, Integer value4, LocalDate value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ExamTermRecord
     */
    public ExamTermRecord() {
        super(ExamTerm.EXAM_TERM);
    }

    /**
     * Create a detached, initialised ExamTermRecord
     */
    public ExamTermRecord(String uuid, String examId, String termId, Integer studentsApplied, LocalDate date) {
        super(ExamTerm.EXAM_TERM);

        setUuid(uuid);
        setExamId(examId);
        setTermId(termId);
        setStudentsApplied(studentsApplied);
        setDate(date);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised ExamTermRecord
     */
    public ExamTermRecord(database.tables.pojos.ExamTerm value) {
        super(ExamTerm.EXAM_TERM);

        if (value != null) {
            setUuid(value.getUuid());
            setExamId(value.getExamId());
            setTermId(value.getTermId());
            setStudentsApplied(value.getStudentsApplied());
            setDate(value.getDate());
            resetChangedOnNotNull();
        }
    }
}
