/*
 * This file is generated by jOOQ.
 */
package database.tables;


import database.Diplomski;
import database.Indexes;
import database.Keys;
import database.tables.records.ReservationsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Reservations extends TableImpl<ReservationsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>diplomski.reservations</code>
     */
    public static final Reservations RESERVATIONS = new Reservations();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReservationsRecord> getRecordType() {
        return ReservationsRecord.class;
    }

    /**
     * The column <code>diplomski.reservations.uuid</code>.
     */
    public final TableField<ReservationsRecord, String> UUID = createField(DSL.name("uuid"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>diplomski.reservations.room_uuid</code>.
     */
    public final TableField<ReservationsRecord, String> ROOM_UUID = createField(DSL.name("room_uuid"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>diplomski.reservations.user_uuid</code>.
     */
    public final TableField<ReservationsRecord, String> USER_UUID = createField(DSL.name("user_uuid"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>diplomski.reservations.name</code>.
     */
    public final TableField<ReservationsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>diplomski.reservations.start_time</code>.
     */
    public final TableField<ReservationsRecord, LocalDateTime> START_TIME = createField(DSL.name("start_time"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>diplomski.reservations.type</code>.
     */
    public final TableField<ReservationsRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>diplomski.reservations.status</code>.
     */
    public final TableField<ReservationsRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>diplomski.reservations.special_request</code>.
     */
    public final TableField<ReservationsRecord, String> SPECIAL_REQUEST = createField(DSL.name("special_request"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>diplomski.reservations.end_time</code>.
     */
    public final TableField<ReservationsRecord, LocalDateTime> END_TIME = createField(DSL.name("end_time"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private Reservations(Name alias, Table<ReservationsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Reservations(Name alias, Table<ReservationsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>diplomski.reservations</code> table reference
     */
    public Reservations(String alias) {
        this(DSL.name(alias), RESERVATIONS);
    }

    /**
     * Create an aliased <code>diplomski.reservations</code> table reference
     */
    public Reservations(Name alias) {
        this(alias, RESERVATIONS);
    }

    /**
     * Create a <code>diplomski.reservations</code> table reference
     */
    public Reservations() {
        this(DSL.name("reservations"), null);
    }

    public <O extends Record> Reservations(Table<O> child, ForeignKey<O, ReservationsRecord> key) {
        super(child, key, RESERVATIONS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Diplomski.DIPLOMSKI;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.RESERVATIONS_ROOMFK_IDX, Indexes.RESERVATIONS_START_AND_STATUS, Indexes.RESERVATIONS_USERFK_IDX);
    }

    @Override
    public UniqueKey<ReservationsRecord> getPrimaryKey() {
        return Keys.KEY_RESERVATIONS_PRIMARY;
    }

    @Override
    public List<ForeignKey<ReservationsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ROOMFK, Keys.USERFK);
    }

    private transient Room _room;
    private transient User _user;

    /**
     * Get the implicit join path to the <code>diplomski.room</code> table.
     */
    public Room room() {
        if (_room == null)
            _room = new Room(this, Keys.ROOMFK);

        return _room;
    }

    /**
     * Get the implicit join path to the <code>diplomski.user</code> table.
     */
    public User user() {
        if (_user == null)
            _user = new User(this, Keys.USERFK);

        return _user;
    }

    @Override
    public Reservations as(String alias) {
        return new Reservations(DSL.name(alias), this);
    }

    @Override
    public Reservations as(Name alias) {
        return new Reservations(alias, this);
    }

    @Override
    public Reservations as(Table<?> alias) {
        return new Reservations(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Reservations rename(String name) {
        return new Reservations(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Reservations rename(Name name) {
        return new Reservations(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Reservations rename(Table<?> name) {
        return new Reservations(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<String, String, String, String, LocalDateTime, String, String, String, LocalDateTime> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super String, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super String, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
