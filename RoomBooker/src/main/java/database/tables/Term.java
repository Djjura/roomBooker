/*
 * This file is generated by jOOQ.
 */
package database.tables;


import database.Diplomski;
import database.Keys;
import database.tables.records.TermRecord;

import java.time.LocalDate;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Term extends TableImpl<TermRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>diplomski.term</code>
     */
    public static final Term TERM = new Term();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TermRecord> getRecordType() {
        return TermRecord.class;
    }

    /**
     * The column <code>diplomski.term.uuid</code>.
     */
    public final TableField<TermRecord, String> UUID = createField(DSL.name("uuid"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>diplomski.term.name</code>.
     */
    public final TableField<TermRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>diplomski.term.start_date</code>.
     */
    public final TableField<TermRecord, LocalDate> START_DATE = createField(DSL.name("start_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>diplomski.term.end_date</code>.
     */
    public final TableField<TermRecord, LocalDate> END_DATE = createField(DSL.name("end_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    private Term(Name alias, Table<TermRecord> aliased) {
        this(alias, aliased, null);
    }

    private Term(Name alias, Table<TermRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>diplomski.term</code> table reference
     */
    public Term(String alias) {
        this(DSL.name(alias), TERM);
    }

    /**
     * Create an aliased <code>diplomski.term</code> table reference
     */
    public Term(Name alias) {
        this(alias, TERM);
    }

    /**
     * Create a <code>diplomski.term</code> table reference
     */
    public Term() {
        this(DSL.name("term"), null);
    }

    public <O extends Record> Term(Table<O> child, ForeignKey<O, TermRecord> key) {
        super(child, key, TERM);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Diplomski.DIPLOMSKI;
    }

    @Override
    public UniqueKey<TermRecord> getPrimaryKey() {
        return Keys.KEY_TERM_PRIMARY;
    }

    @Override
    public Term as(String alias) {
        return new Term(DSL.name(alias), this);
    }

    @Override
    public Term as(Name alias) {
        return new Term(alias, this);
    }

    @Override
    public Term as(Table<?> alias) {
        return new Term(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Term rename(String name) {
        return new Term(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Term rename(Name name) {
        return new Term(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Term rename(Table<?> name) {
        return new Term(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, LocalDate, LocalDate> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super String, ? super String, ? super LocalDate, ? super LocalDate, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super String, ? super String, ? super LocalDate, ? super LocalDate, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
