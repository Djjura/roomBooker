/*
 * This file is generated by jOOQ.
 */
package database.tables;


import database.Diplomski;
import database.Indexes;
import database.Keys;
import database.tables.records.ExamTermRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ExamTerm extends TableImpl<ExamTermRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>diplomski.exam_term</code>
     */
    public static final ExamTerm EXAM_TERM = new ExamTerm();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExamTermRecord> getRecordType() {
        return ExamTermRecord.class;
    }

    /**
     * The column <code>diplomski.exam_term.uuid</code>.
     */
    public final TableField<ExamTermRecord, String> UUID = createField(DSL.name("uuid"), SQLDataType.VARCHAR(225).nullable(false), this, "");

    /**
     * The column <code>diplomski.exam_term.exam_id</code>.
     */
    public final TableField<ExamTermRecord, String> EXAM_ID = createField(DSL.name("exam_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>diplomski.exam_term.term_id</code>.
     */
    public final TableField<ExamTermRecord, String> TERM_ID = createField(DSL.name("term_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>diplomski.exam_term.students_applied</code>.
     */
    public final TableField<ExamTermRecord, Integer> STUDENTS_APPLIED = createField(DSL.name("students_applied"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>diplomski.exam_term.date</code>.
     */
    public final TableField<ExamTermRecord, LocalDate> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATE, this, "");

    private ExamTerm(Name alias, Table<ExamTermRecord> aliased) {
        this(alias, aliased, null);
    }

    private ExamTerm(Name alias, Table<ExamTermRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>diplomski.exam_term</code> table reference
     */
    public ExamTerm(String alias) {
        this(DSL.name(alias), EXAM_TERM);
    }

    /**
     * Create an aliased <code>diplomski.exam_term</code> table reference
     */
    public ExamTerm(Name alias) {
        this(alias, EXAM_TERM);
    }

    /**
     * Create a <code>diplomski.exam_term</code> table reference
     */
    public ExamTerm() {
        this(DSL.name("exam_term"), null);
    }

    public <O extends Record> ExamTerm(Table<O> child, ForeignKey<O, ExamTermRecord> key) {
        super(child, key, EXAM_TERM);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Diplomski.DIPLOMSKI;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.EXAM_TERM_EXAM_FK_IDX, Indexes.EXAM_TERM_TERM_FK_IDX);
    }

    @Override
    public UniqueKey<ExamTermRecord> getPrimaryKey() {
        return Keys.KEY_EXAM_TERM_PRIMARY;
    }

    @Override
    public List<ForeignKey<ExamTermRecord, ?>> getReferences() {
        return Arrays.asList(Keys.EXAM_FK, Keys.TERM_FK);
    }

    private transient Exam _exam;
    private transient Term _term;

    /**
     * Get the implicit join path to the <code>diplomski.exam</code> table.
     */
    public Exam exam() {
        if (_exam == null)
            _exam = new Exam(this, Keys.EXAM_FK);

        return _exam;
    }

    /**
     * Get the implicit join path to the <code>diplomski.term</code> table.
     */
    public Term term() {
        if (_term == null)
            _term = new Term(this, Keys.TERM_FK);

        return _term;
    }

    @Override
    public ExamTerm as(String alias) {
        return new ExamTerm(DSL.name(alias), this);
    }

    @Override
    public ExamTerm as(Name alias) {
        return new ExamTerm(alias, this);
    }

    @Override
    public ExamTerm as(Table<?> alias) {
        return new ExamTerm(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ExamTerm rename(String name) {
        return new ExamTerm(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ExamTerm rename(Name name) {
        return new ExamTerm(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ExamTerm rename(Table<?> name) {
        return new ExamTerm(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, Integer, LocalDate> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super String, ? super String, ? super String, ? super Integer, ? super LocalDate, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super String, ? super String, ? super String, ? super Integer, ? super LocalDate, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
