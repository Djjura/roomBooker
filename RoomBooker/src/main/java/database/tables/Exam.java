/*
 * This file is generated by jOOQ.
 */
package database.tables;


import database.Diplomski;
import database.Keys;
import database.tables.records.ExamRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Exam extends TableImpl<ExamRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>diplomski.exam</code>
     */
    public static final Exam EXAM = new Exam();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExamRecord> getRecordType() {
        return ExamRecord.class;
    }

    /**
     * The column <code>diplomski.exam.id</code>.
     */
    public final TableField<ExamRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(225).nullable(false), this, "");

    /**
     * The column <code>diplomski.exam.name</code>.
     */
    public final TableField<ExamRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>diplomski.exam.semester</code>.
     */
    public final TableField<ExamRecord, Integer> SEMESTER = createField(DSL.name("semester"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>diplomski.exam.espb</code>.
     */
    public final TableField<ExamRecord, Integer> ESPB = createField(DSL.name("espb"), SQLDataType.INTEGER, this, "");

    private Exam(Name alias, Table<ExamRecord> aliased) {
        this(alias, aliased, null);
    }

    private Exam(Name alias, Table<ExamRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>diplomski.exam</code> table reference
     */
    public Exam(String alias) {
        this(DSL.name(alias), EXAM);
    }

    /**
     * Create an aliased <code>diplomski.exam</code> table reference
     */
    public Exam(Name alias) {
        this(alias, EXAM);
    }

    /**
     * Create a <code>diplomski.exam</code> table reference
     */
    public Exam() {
        this(DSL.name("exam"), null);
    }

    public <O extends Record> Exam(Table<O> child, ForeignKey<O, ExamRecord> key) {
        super(child, key, EXAM);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Diplomski.DIPLOMSKI;
    }

    @Override
    public UniqueKey<ExamRecord> getPrimaryKey() {
        return Keys.KEY_EXAM_PRIMARY;
    }

    @Override
    public List<UniqueKey<ExamRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_EXAM_NAME_UNIQUE);
    }

    @Override
    public Exam as(String alias) {
        return new Exam(DSL.name(alias), this);
    }

    @Override
    public Exam as(Name alias) {
        return new Exam(alias, this);
    }

    @Override
    public Exam as(Table<?> alias) {
        return new Exam(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Exam rename(String name) {
        return new Exam(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Exam rename(Name name) {
        return new Exam(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Exam rename(Table<?> name) {
        return new Exam(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super String, ? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super String, ? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
